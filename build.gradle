import de.undercouch.gradle.tasks.download.*
import org.ajoberstar.grgit.*

buildscript {
	repositories {
		mavenCentral()
		
		maven {
			name 'forge'
			url 'http://files.minecraftforge.net/maven'
		}
		
		maven {
			name 'sonatype'
			url 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
		
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	
	dependencies {
		classpath 'de.undercouch:gradle-download-task:3.2.0'
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
		classpath 'org.ajoberstar:grgit:1.7.1'
	}
}

apply plugin: 'java'

apply plugin: 'de.undercouch.download'
apply plugin: 'net.minecraftforge.gradle.forge'

task wrapper(type: Wrapper) {
	gradleVersion = gradle_version
}

ext {
	git = Grgit.open(project.projectDir)
	
	try {
		revision = git.describe().toString().trim()
	} catch (Exception err) {
		println 'Unable to describe anything!'
	}
}

task setupWorkspace(type: Download, dependsOn: setupDecompWorkspace) {
	def forgeArchive = project.file('forge.zip')
	
	src 'http://files.minecraftforge.net/maven/net/minecraftforge/forge/' + forge_version + '/forge-' + forge_version + '-mdk.zip'
	dest forgeArchive
	
	doLast {
		project.copy {
			from zipTree(forgeArchive)
			into 'forge'
		}
		
		project.file('forge/eclipse').renameTo(project.file('eclipse'))
		
		project.file('forge.zip').delete()
		project.file('forge').deleteDir()
	}
}

minecraft {
    version = forge_version
    mappings = forge_mappings
    runDir = "run"
}

version = revision
group = mod_group
archivesBaseName = mod_id

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

build {
	doLast {
		project.file('release').deleteDir()
		project.file('build/libs').renameTo(project.file('release'))
		project.file('build/tmp/recompileMc/sources').renameTo(project.file('minecraftSrc'))
	}
}

processResources {
	exclude '**/*.db'
}

task devJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'dev'
}

artifacts {
	archives devJar
}

def filteredSrc = project.file("$buildDir/filtered")

sourceSets {
	filtered {
		java {
			srcDir filteredSrc
		}
	}
}

compileJava.source = sourceSets.filtered.java

task processVersion(type: Copy) {
	from sourceSets.main.java
	into filteredSrc
	expand(version: project.version)
}

compileJava.dependsOn processVersion

// be sure the filtered source is removed to prevent its source from colliding w/ the main workspace
// execution by finalizedBy allows removal even if the build fails, preventing more crashes from the previously erroneous source
compileJava.finalizedBy cleanProcessVersion