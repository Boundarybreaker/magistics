import de.undercouch.gradle.tasks.download.*
import org.ajoberstar.grgit.*

buildscript {
	repositories {
		mavenCentral()
		
		maven {
			name 'forge'
			url 'http://files.minecraftforge.net/maven'
		}
		
		maven {
			name 'sonatype'
			url 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
		
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	
	dependencies {
		classpath 'de.undercouch:gradle-download-task:3.0.0'
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath 'org.ajoberstar:grgit:1.4.1'
	}
}

apply plugin: 'java'

apply plugin: 'de.undercouch.download'
apply plugin: 'forge'

task wrapper(type: Wrapper) {
	gradleVersion = gradle_version
}

ext {
	git = Grgit.open(project.projectDir)
	
	try {
		revision = git.describe().toString().trim()
	} catch (Throwable err) {
		println 'Unable to describe anything; creating a default release...'
		
		// be sure there is a HEAD to tag
		git.add(patterns: ['.'], update: true)
		git.commit(message: 'Initial commit')
		
		// create something that can be described
		git.tag.add {
			name = 'v0.1'
			message = 'Hello World!'
			annotate = true
		}
		
		// be sure the version is set afterwards
		revision = git.describe().toString().trim()
	}
}

task setupWorkspace(type: Download, dependsOn: setupDecompWorkspace) {
	def forgeArchive = project.file('forge.zip')
	
	src 'http://files.minecraftforge.net/maven/net/minecraftforge/forge/' + forge_version + '/forge-' + forge_version + '-src.zip'
	dest forgeArchive
	
	doLast {
		project.copy {
			from zipTree(forgeArchive)
			into 'forge'
		}
		
		project.file('forge/eclipse').renameTo(project.file('eclipse'))
		
		project.file('forge.zip').delete()
		project.file('forge').deleteDir()
	}
}

repositories {
    mavenCentral()
	maven {
        name = 'ChickenBones'
        url = 'http://chickenbones.net/maven'
    }
    maven {
        name 'ProfMobius'
        url 'http://mobiusstrip.eu/maven'
    }
	maven {
		name 'DVS1 Maven FS'
		url 'http://dvs1.progwml6.com/files/maven'
	}
}

task getDependencies(type: Download) {
	def lib = new File(project.projectDir, 'lib')
	
	if (!lib.exists()) {
		lib.mkdirs()
	}
	
	src ([
		'https://dl.dropboxusercontent.com/u/47135879/Thaumcraft-deobf-1.7.10-4.2.3.5.jar',
		'https://dl.dropboxusercontent.com/u/47135879/Baubles-deobf-1.7.10-1.0.1.10.jar'
	])
	
	dest lib
	overwrite true
}

minecraft {
	version = forge_version
	runDir = 'eclipse'
}

version = revision
group = mod_group
archivesBaseName = mod_id

dependencies {
	if (project.file('lib').exists()) {
		compile fileTree(dir: 'lib', include: '*.jar')
	}
	
	//compile 'mcp.mobius.waila:Waila:1.5.10_1.7.10:dev'
	//compile 'mantle:Mantle:1.7.10-0.3.2.jenkins187:deobf'
}

build {
	doLast {
		project.file('release').deleteDir()
		project.file('build/libs').renameTo(project.file('release'))
		project.file('build/tmp/recompSrc').renameTo(project.file('minecraftSrc'))
	}
}

processResources {
	exclude '**/*.db'
}

task devJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'dev'
}

task srcJar(type: Jar) {
	from sourceSets.main.allJava
	classifier = 'src'
}

artifacts {
	archives devJar, srcJar
}

def filteredSrc = project.file("$buildDir/filtered")

sourceSets {
	filtered {
		java {
			srcDir filteredSrc
		}
	}
}

compileJava.source = sourceSets.filtered.java

task processVersion(type: Copy) {
	from sourceSets.main.java
	into filteredSrc
	expand(version: project.version)
}

compileJava.dependsOn processVersion

// be sure the filtered source is removed to prevent its source from colliding w/ the main workspace
// execution by finalizedBy allows removal even if the build fails, preventing more crashes from the previously erroneous source
compileJava.finalizedBy cleanProcessVersion