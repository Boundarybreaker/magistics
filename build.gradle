import de.undercouch.gradle.tasks.download.Download

buildscript {
	repositories {
		mavenCentral()
		maven {
			name 'forge'
			url 'http://files.minecraftforge.net/maven'
		}
		maven {
			name 'sonatype'
			url 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
	}
}

plugins {
	id 'de.undercouch.download' version '1.2'
}

task setupWorkspace(type: Download) {
	def destination = new File(System.getProperty('user.dir'), 'forge.zip')

	src 'http://files.minecraftforge.net/maven/net/minecraftforge/forge/' + forge_version + '/forge-' + forge_version + '-src.zip'
	dest destination

	doLast {
		project.copy {
			from zipTree(destination)
			into 'forge'
		}

		// move the eclipse metadata into the workspace
		project.file('forge/eclipse').renameTo(project.file('eclipse'))

		// delete all of the excess stuff
		project.file('forge').deleteDir()
		project.file('forge.zip').delete()
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = gradle_version
}

apply plugin: 'curseforge'
apply plugin: 'forge'

// get all of the versions off of the changelog
def versions = file('info/changelog.md').text =~ /(## Version )(.*)/

// get the version at the top of the changelog
def latestVersion = versions[0][2]

version = latestVersion
group = 'T145.magistics'
archivesBaseName = 'Magistics'

minecraft {
	version = forge_version
	runDir = 'eclipse'
}

repositories {
	mavenCentral()
	maven {
		name 'ChickenBones'
		url 'http://chickenbones.net/maven'
	}
	maven {
		name 'IC2'
		url 'http://maven.ic2.player.to/'
	}
	maven {
		name 'ProfMobius'
		url 'http://mobiusstrip.eu/maven'
	}
}

dependencies {
    compile 'appeng:appliedenergistics2:rv1-stable-1:dev'
    compile 'com.mod-buildcraft:buildcraft:6.4.3:dev'
    compile 'com.pahimar.ee3:EquivalentExchange3:1.7.10-0.2.374:dev'
    compile 'cpw.mods:ironchest:1.7.10-6.0.62.742:deobf'

    compile 'codechicken:CodeChickenLib:1.7.10-1.1.1.110:dev'
    compile 'codechicken:ForgeMultipart:1.7.10-1.1.1.320:dev'

    compile 'codechicken:CodeChickenCore:1.7.10-1.0.4.35:dev'
    compile 'codechicken:EnderStorage:1.7.10-1.4.5.27:dev'
    compile 'codechicken:NotEnoughItems:1.7.10-1.0.4.83:dev'

    compile 'mcp.mobius.waila:Waila:1.5.6a_1.7.10'

    compile fileTree(dir: 'lib', include: '*.jar')
}

processResources {
	inputs.property 'version', project.version
	inputs.property 'mcversion', project.minecraft.version

	from (sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	from (sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

def title = project.minecraft.version + '-' + project.version

// rename the default obfuscated jar
jar {
	version title
}

// add a developer release
task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier 'dev'
	version title
}

// add an API release for developers
task apiZip(type: Zip) {
	from (sourceSets.main.java) {
		include 'T145/magistics/api/**'
	}
	classifier 'api'
	version title
}

apiZip.mustRunAfter(deobfJar)

// add a javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
	from 'build/docs/javadoc'
	classifier 'javadoc'
	version title
}

// add a source backup for the project
task sourceJar(type: Jar) {
	from sourceSets.main.allJava
	classifier 'src'
	version title
}

artifacts {
	archives deobfJar, apiZip, sourceJar//, javadocJar
}

curse {
	// get all of the text off of the changelog
	def content = file('info/changelog.md').text =~ /(## Version )(.*)\n(.*)/

	// get the latest changelog
	def latestChangelog = content[0][3]

	apiKey = curse_token
	projectId = project_id
	changelog = latestChangelog
	releaseType = 'beta'

	// append another jar to the obfuscated release
	//additionalArtificat project.file('build/libs/*deobf.jar')
}