import de.undercouch.gradle.tasks.download.Download

buildscript {
	repositories {
		mavenCentral()
		maven {
			name 'forge'
			url 'http://files.minecraftforge.net/maven'
		}
		maven {
			name 'sonatype'
			url 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
		maven {
			name 'ChickenBones'
			url 'http://chickenbones.net/maven'
		}
		maven {
			name 'IC2'
			url 'http://maven.ic2.player.to/'
		}
		maven {
			name 'Mobius'
			url 'http://mobiusstrip.eu/maven'
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
	}
}

// only buildscript and plugins blocks are allowed before plugins blocks
plugins {
	id 'de.undercouch.download' version '1.2'
}

// the setup command
task setupWorkspace(type: Download) {
	def eclipseDir = file('eclipse')

	// be sure we have a clean destination to copy the eclipse metadata to
	if (eclipseDir.isDirectory()) {
		eclipseDir.deleteDir()
	}

	def destination = file(System.getProperty('user.dir'), 'forge.zip')

	src 'http://files.minecraftforge.net/maven/net/minecraftforge/forge/' + forge_version + '/forge-' + forge_version + '-src.zip'
	dest destination

	doLast {
		project.copy {
			from zipTree(destination)
			into 'forge'
		}

		// move the eclipse metadata into our workspace
		project.file('forge/eclipse').renameTo(project.file('eclipse'))

		// clean out the remaining forge stuff
		project.file('forge').deleteDir()
		project.file('forge.zip').delete()
	}
}

// updates the gradle wrapper
task wrapper(type: Wrapper) {
	gradleVersion = gradle_version
}

apply plugin: 'curseforge'
apply plugin: 'forge'

// get the project version from the changelog
def versions = file('info/changelog.md').text =~ /(## Version )(.*)/
version = versions[0][2]

group = 'T145.magistics'
archivesBaseName = 'Magistics'

minecraft {
	version = forge_version
	runDir = 'eclipse'
}

dependencies {
	compile 'appeng:appliedenergistics2:rv1-stable-1:dev'
	compile 'com.mod-buildcraft:buildcraft:6.4.3:dev'
	compile 'codechicken:CodeChickenCore:1.7.10-1.0.4.35:dev'
	compile 'codechicken:CodeChickenLib:1.7.10-1.1.1.110:dev'
	compile 'com.pahimar.ee3:EquivalentExchange3:1.7.10-0.2.374:dev'
	compile 'codechicken:EnderStorage:1.7.10-1.4.5.27:dev'
	compile 'codechicken:ForgeMultipart:1.7.10-1.1.1.320:dev'
	compile 'cpw.mods:ironchest:1.7.10-6.0.62.742:deobf'
	compile 'codechicken:NotEnoughItems:1.7.10-1.0.4.83:dev'

	compile fileTree(dir: 'lib', include: '*.jar')
}

processResources {
	// this will ensure that this task is redone when the version changes
	inputs.property 'version', project.version
	inputs.property 'mcversion', project.minecraft.version

	// replace the version properties in the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion with the updated properties
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// now process everything else except the mcmod.info, since that's been dealt with
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

def project_title = project.minecraft.version + '-' + project.version

// modifies the regular release
jar {
	version = project_title
}

// add a developer release
task deobfJar(type: Jar) {
	from(sourceSets.main.output)
	classifier = 'dev'
	version = project_title
}

// add an API release for developers
task apiZip(type: Zip) {
	from(sourceSets.main.java) {
		include 'T145/magistics/api'
	}
	classifier = 'api'
	version = project_title
}

apiZip.mustRunAfter(deobfJar)

// add a javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
	from('build/docs/javadoc')
	classifier = 'javadoc'
	version = project_title
}

// add a backup for the project source code
task sourceJar(type: Jar) {
	from(sourceSets.main.allJava)
	classifier = 'src'
	version = project_title
}

artifacts {
	archives deobfJar, apiZip, sourceJar, javadocJar
}

curse {
	// get the latest changelog from the changlelog file
	def content = file('info/changlelog.md').text =~ /(## Version)(.*)\n(.*)/
	changelog = content[0][3]

	apiKey = curse_token
	project = project_id
	releaseType = 'beta'

	// the obfuscated jar is uploaded by default
	//additionalArtifact project.file('build/libs/*deobf.jar')
}