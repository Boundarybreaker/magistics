import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.filters.*

buildscript {
	repositories {
		jcenter()
		mavenCentral()
		
		maven {
			name = 'forge'
			url = 'http://files.minecraftforge.net/maven'
		}
		
		maven {
			name = 'sonatype'
			url = 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
	}
	
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath 'de.undercouch:gradle-download-task:1.2'
	}
}

apply plugin: 'de.undercouch.download'

task getDependencies(type: Download) {
	def lib = new File(project.projectDir, 'lib')

	if (!lib.exists()) {
		lib.mkdirs()
	}

	src([
		// Thaumcraft
		'https://dl.dropboxusercontent.com/u/47135879/Thaumcraft-deobf-1.7.10-4.2.3.5.jar',
		'https://dl.dropboxusercontent.com/u/47135879/Baubles-deobf-1.7.10-1.0.1.10.jar',
		
		// Applied Energistics
		'http://ae-mod.info/builds/appliedenergistics2-rv2-stable-3-dev.jar',
		
		// ChickenBones
		'http://chickenbones.net/maven/codechicken/CodeChickenCore/1.7.10-1.0.6.44/CodeChickenCore-1.7.10-1.0.6.44-dev.jar',
		'http://files.minecraftforge.net/maven/codechicken/CodeChickenLib/1.7.10-1.1.3.136/CodeChickenLib-1.7.10-1.1.3.136-dev.jar',
		'http://chickenbones.net/maven/codechicken/NotEnoughItems/1.7.10-1.0.4.107/NotEnoughItems-1.7.10-1.0.4.107-dev.jar',
		
		// Cofh
		'http://addons-origin.cursecdn.com/files/2234/199/CoFHCore-[1.7.10]3.0.2-262-dev.jar',
		'http://addons-origin.cursecdn.com/files/2233/781/ThermalFoundation-[1.7.10]1.0.0-81-dev.jar',
		'http://addons-origin.cursecdn.com/files/2233/797/ThermalExpansion-[1.7.10]4.0.0-176-dev.jar'
	])
	dest lib
}

task setupWorkspace(type: Download, dependsOn: getDependencies) {
	def destination = new File(project.projectDir, 'forge.zip')
	
	src 'http://files.minecraftforge.net/maven/net/minecraftforge/forge/' + forge_version + '/forge-' + forge_version + '-src.zip'
	dest destination
	
	doLast {
		project.copy {
			from zipTree(destination)
			into 'forge'
		}
		
		project.file('forge/eclipse').renameTo(project.file('eclipse'))
		
		project.file('forge').deleteDir()
		project.file('forge.zip').delete()
	}
}

task wrap(type: Wrapper) {
	gradleVersion = gradle_version
}

def getVersion = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

apply plugin: 'forge'

version = getVersion()
group = 'T145.magistics'
archivesBaseName = 'Magistics'

minecraft {
	version = forge_version
	runDir = 'eclipse'
}

dependencies {
	compile fileTree(dir: 'lib', include: '*.jar')
}

processResources {
	exclude '**/*.db'
}

apply plugin: 'java'

def filteredSourceDir = file("$buildDir/filtered")

sourceSets {
	filtered {
		java {
			srcDirs = [filteredSourceDir]
		}
	}
}

compileJava.source = sourceSets.filtered.java

task processVersion(type: Copy) {
	from sourceSets.main.java
	into filteredSourceDir
	expand(version: project.version)
}

compileJava.dependsOn processVersion