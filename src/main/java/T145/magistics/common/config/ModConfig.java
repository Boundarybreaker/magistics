package T145.magistics.common.config;

import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraftforge.common.config.Configuration;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.Logger;

import thaumcraft.common.config.Config;
import T145.magistics.api.client.renderers.items.ItemChestRenderer;
import T145.magistics.client.renderers.BlockCrystalStorageRenderer;
import T145.magistics.client.renderers.TileChestHungryMetalRenderer;
import T145.magistics.common.Magistics;
import T145.magistics.common.blocks.BlockChestHungryMetal;
import T145.magistics.common.blocks.BlockChestHungryMetalItem;
import T145.magistics.common.blocks.BlockCrystalStorageBasic;
import T145.magistics.common.blocks.BlockCrystalStorageBrick;
import T145.magistics.common.blocks.BlockCrystalStorageBrickEngineeringDark;
import T145.magistics.common.blocks.BlockCrystalStorageBrickEngineeringLight;
import T145.magistics.common.blocks.BlockCrystalStorageItem;
import T145.magistics.common.blocks.BlockCrystalStoragePlate;
import T145.magistics.common.blocks.BlockCrystalStoragePlatform;
import T145.magistics.common.blocks.BlockCrystalStorageShield;
import T145.magistics.common.blocks.BlockCrystalStorageStructure;
import T145.magistics.common.lib.ModObjects;
import T145.magistics.common.tiles.TileChestHungryMetal;
import cpw.mods.fml.client.event.ConfigChangedEvent.OnConfigChangedEvent;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;

public class ModConfig {
	private static Configuration config;
	public static final String CATEGORY_BLOCKS = "Blocks", CATEGORY_ITEMS = "Items";

	public static boolean debug = false, blocks[], items[];

	public static void sync() {
		debug = config.getBoolean("Debug", config.CATEGORY_GENERAL, false, "Toggles advanced log output.");
	}

	public static void onConfigChanged(String modid, OnConfigChangedEvent e) {
		if (e.modID.equals(modid)) {
			sync();

			if (config != null && config.hasChanged())
				config.save();
		}
	}

	public static void loadMetadata(ModMetadata meta, String modid, String version) {
		meta.autogenerated = false;
		meta.modId = meta.name = modid;
		meta.version = version;
		meta.description = "Adding some logistics to Thaumcraft!";
		meta.url = "https://github.com/T145/magistics";
		meta.updateUrl = "https://github.com/T145/magistics/releases";
		meta.authorList.add("T145");
		meta.credits = "Texture team is awesome, and so are the fans!";
		meta.logoFile = "logo.png";
	}

	public static void preInit(FMLPreInitializationEvent e, Logger logger) {
		try {
			config = new Configuration(e.getSuggestedConfigurationFile());
			config.copyCategoryProps(Config.config, new String[] { "enchantments", "monster_spawning", "world_generation", "world_regeneration" });
			config.addCustomCategoryComment(CATEGORY_BLOCKS, "Blocks added by Magistics");
			config.addCustomCategoryComment(CATEGORY_ITEMS, "Items added by Magistics");
			config.load();
			sync();
			config.save();
		} catch (Exception ex) {
			logger.log(Level.ERROR, "A fatal error has occurred while reading configuration properties!");
		} finally {
			if (config != null)
				config.save();
		}
	}

	public static Configuration getConfig() {
		return config;
	}

	public static Block
	blockCrystalStorage = new BlockCrystalStorageBasic(),
	blockCrystalStorageBrick = new BlockCrystalStorageBrick(),
	blockCrystalStoragePlate = new BlockCrystalStoragePlate(),
	blockCrystalStoragePlatform = new BlockCrystalStoragePlatform(),
	blockCrystalStorageShield = new BlockCrystalStorageShield(),
	blockCrystalStorageStructure = new BlockCrystalStorageStructure(),
	blockCrystalStorageBrickEngineeringLight = new BlockCrystalStorageBrickEngineeringLight(),
	blockCrystalStorageBrickEngineeringDark = new BlockCrystalStorageBrickEngineeringDark();

	public static BlockChestHungryMetal blockChestHungryMetal = new BlockChestHungryMetal();

	public static void init() {
		ModObjects reg = ModObjects.getRegistry();
		reg.addBlock(blockCrystalStorage, BlockCrystalStorageItem.class);
		reg.addBlock(blockCrystalStorageBrick, BlockCrystalStorageItem.class);
		reg.addBlock(blockCrystalStoragePlate, BlockCrystalStorageItem.class);
		reg.addBlock(blockCrystalStoragePlatform, BlockCrystalStorageItem.class);
		reg.addBlock(blockCrystalStorageShield, BlockCrystalStorageItem.class);
		reg.addBlock(blockCrystalStorageStructure, BlockCrystalStorageItem.class);
		reg.addBlock(blockCrystalStorageBrickEngineeringLight, BlockCrystalStorageItem.class);
		reg.addBlock(blockCrystalStorageBrickEngineeringDark, BlockCrystalStorageItem.class);

		reg.addBlockRenderer(blockCrystalStorage, new BlockCrystalStorageRenderer(blockCrystalStorage.getRenderType()));
		reg.addBlockRenderer(blockCrystalStorageBrick, new BlockCrystalStorageRenderer(blockCrystalStorageBrick.getRenderType()));
		reg.addBlockRenderer(blockCrystalStoragePlate, new BlockCrystalStorageRenderer(blockCrystalStoragePlate.getRenderType()));
		reg.addBlockRenderer(blockCrystalStoragePlatform, new BlockCrystalStorageRenderer(blockCrystalStoragePlatform.getRenderType()));
		reg.addBlockRenderer(blockCrystalStorageShield, new BlockCrystalStorageRenderer(blockCrystalStorageShield.getRenderType()));
		reg.addBlockRenderer(blockCrystalStorageStructure, new BlockCrystalStorageRenderer(blockCrystalStorageStructure.getRenderType()));
		reg.addBlockRenderer(blockCrystalStorageBrickEngineeringLight, new BlockCrystalStorageRenderer(blockCrystalStorageBrickEngineeringLight.getRenderType()));
		reg.addBlockRenderer(blockCrystalStorageBrickEngineeringDark, new BlockCrystalStorageRenderer(blockCrystalStorageBrickEngineeringDark.getRenderType()));

		if (Loader.isModLoaded("IronChest")) {
			if (debug)
				Magistics.logger.info("IronChest detected; compatibility loaded.");

			reg.addBlock(blockChestHungryMetal, BlockChestHungryMetalItem.class);
			reg.addTile(TileChestHungryMetal.class);

			TileChestHungryMetalRenderer tileRendererChestHungryMetal = new TileChestHungryMetalRenderer();

			reg.addItemRenderer(Item.getItemFromBlock(blockChestHungryMetal), new ItemChestRenderer(tileRendererChestHungryMetal.getChestTextures()));
			reg.addTileRenderer(TileChestHungryMetal.class, tileRendererChestHungryMetal);
		}

		reg.registerObjects();
		reg.registerRenderers();
	}

	public static void postInit() {
	}
}