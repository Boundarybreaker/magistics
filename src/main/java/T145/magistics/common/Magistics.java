package T145.magistics.common;

import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.util.EnumChatFormatting;
import net.minecraftforge.common.config.Configuration;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import thaumcraft.api.ThaumcraftApi;
import thaumcraft.api.aspects.Aspect;
import thaumcraft.api.aspects.AspectList;
import thaumcraft.api.research.ResearchItem;
import thaumcraft.api.research.ResearchPage;
import thaumcraft.common.config.Config;
import thaumcraft.common.config.ConfigBlocks;
import T145.magistics.client.GuiHandler;
import T145.magistics.common.config.Research;
import cpw.mods.fml.client.event.ConfigChangedEvent.OnConfigChangedEvent;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.Mod.Metadata;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import cpw.mods.fml.common.network.NetworkRegistry;

@Mod(modid = Magistics.modid, name = Magistics.modid, version = Magistics.version, guiFactory = "T145.magistics.client.GuiFactory", dependencies = "after:Thaumcraft", useMetadata = false)
public class Magistics {
	public static final String modid = "Magistics", version = "8.0.0";

	@Instance(modid)
	public static Magistics instance;

	@Metadata
	public static ModMetadata meta;

	@SidedProxy(clientSide = "T145.magistics.client.ClientProxy", serverSide = "T145.magistics.common.CommonProxy")
	public static CommonProxy proxy;

	public static Configuration config;
	public static Logger logger = LogManager.getLogger(modid);

	public static final String CATEGORY_BLOCKS = "Blocks", CATEGORY_ITEMS = "Items";
	public static boolean debug, colored_names;
	public static String modid_format;

	public void syncConfiguration() {
		debug = config.getBoolean("Debug", config.CATEGORY_GENERAL, true, "Toggles advanced log output.");
		colored_names = config.getBoolean("Colored Names", config.CATEGORY_GENERAL, true, "Toggles certain colored names in the mod. NOTE: Requires a restart to take effect!");
		modid_format = config.getString("Mod ID Format Code", config.CATEGORY_GENERAL, "b", "The formatting code that determines how the mod name looks, just for fun! NOTE: Doesn't take effect if colored names is disabled.");
	}

	@EventHandler
	public void preInit(FMLPreInitializationEvent e) {
		meta.autogenerated = false;

		try {
			config = new Configuration(e.getSuggestedConfigurationFile());
			config.copyCategoryProps(Config.config, new String[] { "enchantments", "monster_spawning", "world_generation", "world_regeneration" });
			config.addCustomCategoryComment(CATEGORY_BLOCKS, "Blocks added by Magistics");
			config.addCustomCategoryComment(CATEGORY_ITEMS, "Items added by Magistics");
			config.load();
			syncConfiguration();
			config.save();
		} catch (Exception err) {
			logger.error("An error has occurred while loading configuration properties!", err);
		} finally {
			if (config != null)
				config.save();
		}

		proxy.registerHandlers(instance);
	}

	@SubscribeEvent
	public void onConfigChanged(OnConfigChangedEvent e) {
		if (e.modID.equals(modid)) {
			syncConfiguration();

			if (config != null && config.hasChanged())
				config.save();
		}
	}

	@EventHandler // registry registering & FMLInterComms
	public void init(FMLInitializationEvent e) {
		meta.modId = modid;
		meta.name = colored_names ? "ยง" + modid_format + modid : modid;
		meta.description = "Adding some logistics to Thaumcraft!";
		meta.version = version;
		meta.url = "https://github.com/T145/magistics";
		meta.updateUrl = "https://github.com/T145/magistics/releases";
		meta.authorList.add(EnumChatFormatting.GOLD + "T145");
		meta.credits = "Special thanks to the texturing team!";
		meta.logoFile = "logo.png";

		NetworkRegistry.INSTANCE.registerGuiHandler(instance, new GuiHandler());
		proxy.registerObjects();
	}

	@EventHandler // renderers, recipes, & TC stuff
	public void postInit(FMLPostInitializationEvent e) {
		Research research = Research.getInstance();
		research.addRecipe("HungryEnderChest", ThaumcraftApi.addArcaneCraftingRecipe("HUNGRYENDERCHEST", new ItemStack(proxy.blockChestHungryEnder), new AspectList().add(Aspect.AIR, 5).add(Aspect.ORDER, 3).add(Aspect.ENTROPY, 3), "ABA", "ACA", "AAA", 'A', Blocks.obsidian, 'B', new ItemStack(ConfigBlocks.blockMetalDevice, 1, 5), 'C', Items.ender_eye));
		research.addResearch(new ResearchItem("HUNGRYENDERCHEST", Magistics.modid, new AspectList().add(Aspect.HUNGER, 3).add(Aspect.VOID, 3), -1, 0, 1, new ItemStack(proxy.blockChestHungryEnder)).setPages(new ResearchPage("tc.research_page.HUNGRYENDERCHEST.1"), research.arcane("HungryEnderChest")).setSecondary().setParents("HUNGRYCHEST"));
		research.register();
	}

	@EventHandler // register commands here
	public void serverInit(FMLServerStartingEvent e) {
	}
}